getLikers method dublicate data
enable blog comments according to user
filters in invoices dublicate data
update one by one



//*
// security
// change password+-,
// notifications
// *



////////

To implement filtering for products based on various criteria such as gender, category, color, price, and rating, you need to create a REST controller that handles the filtering logic. You also need to add a method to the `ProductRepository` to support dynamic queries.

### 1. Update `ProductRepository`

First, update the `ProductRepository` to include a method for filtering products based on the given criteria. You can use Spring Data JPA's `@Query` annotation or Spring Data JPA Specifications.

Using Spring Data JPA Specifications:

```java
package com.example.hubNet.repositories.eCommerce;

import com.example.hubNet.entities.eCommerce.ProductEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface ProductRepository extends JpaRepository<ProductEntity, Long>, JpaSpecificationExecutor<ProductEntity> {
}
```

### 2. Create `ProductSpecification`

Create a specification class to handle dynamic queries:

```java
package com.example.hubNet.repositories.eCommerce;

import com.example.hubNet.entities.eCommerce.ProductEntity;
import org.springframework.data.jpa.domain.Specification;

import java.math.BigDecimal;

public class ProductSpecification {

    public static Specification<ProductEntity> hasGender(String gender) {
        return (product, cq, cb) -> cb.equal(product.get("productGender"), gender);
    }

    public static Specification<ProductEntity> hasCategory(String category) {
        return (product, cq, cb) -> cb.equal(product.get("productCategory"), category);
    }

    public static Specification<ProductEntity> hasColor(String color) {
        return (product, cq, cb) -> cb.equal(product.get("productColor"), color);
    }

    public static Specification<ProductEntity> hasPriceRange(BigDecimal minPrice, BigDecimal maxPrice) {
        return (product, cq, cb) -> cb.between(product.get("productRegularPrice"), minPrice, maxPrice);
    }

    public static Specification<ProductEntity> hasMinRating(double minRating) {
        return (product, cq, cb) -> cb.greaterThanOrEqualTo(product.get("averageRating"), minRating);
    }
}
```

### 3. Create `ProductController`

Create a controller to handle the filtering requests:

```java
package com.example.hubNet.controllers.eCommerce;

import com.example.hubNet.DTO.eCommerce.ProductDTO;
import com.example.hubNet.services.eCommerce.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;

import static com.example.hubNet.repositories.eCommerce.ProductSpecification.*;

@RestController
@RequestMapping("/api/products")
public class ProductController {

    @Autowired
    private ProductService productService;

    @GetMapping("/filter")
    public List<ProductDTO> filterProducts(
            @RequestParam(required = false) String gender,
            @RequestParam(required = false) String category,
            @RequestParam(required = false) String color,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice,
            @RequestParam(required = false) Double minRating) {

        Specification<ProductEntity> spec = Specification.where(null);

        if (gender != null) {
            spec = spec.and(hasGender(gender));
        }
        if (category != null) {
            spec = spec.and(hasCategory(category));
        }
        if (color != null) {
            spec = spec.and(hasColor(color));
        }
        if (minPrice != null && maxPrice != null) {
            spec = spec.and(hasPriceRange(minPrice, maxPrice));
        }
        if (minRating != null) {
            spec = spec.and(hasMinRating(minRating));
        }

        return productService.filterProducts(spec);
    }
}
```

### 4. Update `ProductService`

Add the `filterProducts` method in `ProductService`:

```java
package com.example.hubNet.services.eCommerce;

import com.example.hubNet.DTO.eCommerce.ProductDTO;
import com.example.hubNet.entities.eCommerce.ProductEntity;
import com.example.hubNet.repositories.eCommerce.ProductRepository;
import com.example.hubNet.services.mappers.eCommerce.ProductMappers;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

@Service
public class ProductService {

    private final ProductRepository productRepository;
    private final UserRepository userRepository;

    @Value("${upload.dir}")
    private String uploadDir;

    public ProductService(ProductRepository productRepository, UserRepository userRepository) {
        this.productRepository = productRepository;
        this.userRepository = userRepository;
    }

    @Transactional
    public ProductDTO createProduct(Long userId, ProductDTO productDTO, MultipartFile productImage) throws IOException {
        UserEntity user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found: " + userId));

        ProductEntity productEntity = ProductMappers.toEntity(productDTO);

        if (productImage != null && !productImage.isEmpty()) {
            Path directory = Paths.get(uploadDir);
            if (!Files.exists(directory)) {
                Files.createDirectories(directory);
            }

            String filePath = uploadDir + productEntity.getProductId() + "_" + productImage.getOriginalFilename();
            Path profilePhotoPath = Paths.get(filePath);
            Files.write(profilePhotoPath, productImage.getBytes());

            productEntity.setProductImagePath(filePath);
        }

        productEntity.setProductUser(user);
        if (productDTO.getProductSalePrice() != null && productDTO.getProductSalePrice().compareTo(BigDecimal.ZERO) > 0) {
            productEntity.setProductSaleStatus(ProductSaleStatus.SALE);
        } else {
            productEntity.setProductSaleStatus(ProductSaleStatus.REGULAR);
        }

        productRepository.save(productEntity);

        return ProductMappers.toDTO(productEntity);
    }

    @Transactional
    public List<ProductDTO> getAllProducts() {
        List<ProductEntity> entities = productRepository.findAll();
        List<ProductDTO> dtoList = new ArrayList<>();
        for (ProductEntity p : entities) {
            double averageRating = p.calculateAverageRating();
            ProductDTO productDTO = ProductMappers.toDTO(p);
            productDTO.setAverageRating(averageRating);

            productDTO.setStockStatus(p.getStockStatus());
            productDTO.setProductStatus(p.getProductStatus().toString());

            dtoList.add(productDTO);
        }
        return dtoList;
    }

    @Transactional
    public ProductDTO getProduct(Long id) {
        ProductEntity productEntity = productRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Product not found"));

        double averageRating = productEntity.calculateAverageRating();
        ProductDTO productDTO = ProductMappers.toDTO(productEntity);
        productDTO.setAverageRating(averageRating);

        productDTO.setStockStatus(productEntity.getStockStatus());
        productDTO.setProductStatus(productEntity.getProductStatus().toString());

        return productDTO;
    }

    @Transactional
    public List<ProductDTO> filterProducts(Specification<ProductEntity> spec) {
        List<ProductEntity> entities = productRepository.findAll(spec);
        List<ProductDTO> dtoList = new ArrayList<>();
        for (ProductEntity p : entities) {
            double averageRating = p.calculateAverageRating();
            ProductDTO productDTO = ProductMappers.toDTO(p);
            productDTO.setAverageRating(averageRating);

            productDTO.setStockStatus(p.getStockStatus());
            productDTO.setProductStatus(p.getProductStatus().toString());

            dtoList.add(productDTO);
        }
        return dtoList;
    }
}
```

### Explanation:

1. **`ProductRepository`**: Extended `JpaSpecificationExecutor` to enable dynamic queries.
2. **`ProductSpecification`**: Created a class with methods that return `Specification<ProductEntity>` for each filtering criteria.
3. **`ProductController`**: Added a new endpoint `/api/products/filter` to handle filtering requests.
4. **`ProductService`**: Added a `filterProducts` method that takes a `Specification<ProductEntity>` and returns filtered products.

This setup allows you to filter products based on gender, category, color, price range, and minimum rating using the specified criteria.